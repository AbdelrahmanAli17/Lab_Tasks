library(XML)
#load XML file
csf_data <- xmlToDataFrame(xmlParse("csf_metabolites.xml"))
smdb_ids_all <- c()
for(i in 1:nrow(csf_data)){
string <- csf_data$biological_properties[i]
smdb_ids <- gregexpr("SMP\\d+", string, perl = TRUE)[[1]]
smdb_ids_all <- c(smdb_ids_all, substring(string, smdb_ids, smdb_ids + 7))
}
smdp_id <- as.data.frame(smdb_ids_all)
n_metabolites <- length(smdp_id[smdp_id$smdb_ids_all == "SMP00044" ,])
n_metabolites
install.packages("Connectome")
devtools::install_github("Connectome")
devtools::install_github("msraredon/Connectome")
devtools::install_github("msraredon/Connectome" , ref = "master")
library(data.table)
library(stringr)
library(dplyr)
setwd("D:/Work57/Mahmoud/")
df <- fread("D:/Work57/Mahmoud/proteinGroups.txt")
df <- df[df$`Potential contaminant` != "+",]
df <- df[df$Reverse != "+",]
df <- df[df$`Only identified by site` != "+",]
df$features <- paste0('Protein group ' , row.names(df))
dfdf <- df[,c(1,163)]
View(dfdf)
View(csf_data)
View(df)
View(df)
df <- df[,c(seq(107,123))]
colnames(df)
ctrl <- grep("Ctrl", colnames(df), fixed = T)
library(data.table)
library(stringr)
library(dplyr)
setwd("D:/Work57/Mahmoud/")
df <- fread("D:/Work57/Mahmoud/proteinGroups.txt")
df <- df[df$`Potential contaminant` != "+",]
df <- df[df$Reverse != "+",]
df <- df[df$`Only identified by site` != "+",]
colnames(df)
df <- df[,c(seq(112,130))]
colnames(df)
df <- fread("D:/Work57/Mahmoud/proteinGroups.txt")
df <- df[df$`Potential contaminant` != "+",]
df <- df[df$Reverse != "+",]
df <- df[df$`Only identified by site` != "+",]
df <- df[,c(seq(112,129))]
colnames(df)
#AC Before normalization
plot(density(log2(apply(df, 1, mean, rm.na = TRUE))), main = "AC_BEFORE_Normaliztion")
AC <- df[,c(seq(7,12))]
View(AC)
colnames(AC)
#AC Before normalization
plot(density(log2(apply(AC, 1, mean, rm.na = TRUE))), main = "AC_BEFORE_Normaliztion")
shapiro.test(apply(AC, 1, mean, rm.na = TRUE))
dd <- read.csv("AC_before_filteration_without_ctrl.csv")
#Ac samples without control
AC_2 <-dd[,grepl("AC.H2" , colnames(dd) , fixed = T)]
AC_6 <-dd[,grepl("AC.H6" , colnames(dd) , fixed = T)]
AC_8 <-dd[,grepl("AC.H8" , colnames(dd) , fixed = T)]
all_AC<- dd[#(apply(as.data.frame(dd$LFQ.intensity.HL60.12H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.24H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.48H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
(apply(AC_2 , 1, function(x) sum(is.na(x))) == 0 )&
(apply(AC_6 , 1, function(x) sum(is.na(x))) ==0 )&
(apply(AC_8 , 1, function(x) sum(is.na(x))) == 0 )
,]
row.names(all_AC) <-all_AC$X
all_AC <- all_AC[,-c(1)]
#normalization
all_AC <- mutate_all(all_AC,function(x) as.numeric(as.character(x)))
which.max(colSums(all_AC, na.rm = T))
X <- all_AC
row.names(X)
pqn.dd <- pqn(X, QC = "LFQ.intensity.HL60.AC.H8.S2")
pqn <- function(X, n = "median", QC = NULL) {
X.norm <- matrix(nrow = nrow(X), ncol = ncol(X))
colnames(X.norm) <- colnames(X)
rownames(X.norm) <- rownames(X)
mX <-  median(as.numeric(X[,QC]), na.rm = T)
# do the actual normalisation
#divid each column by the median of each column by median of reference sample
for (a in 1:ncol(X)) {
X.norm[,a] <- as.numeric(X[,a]) / median(as.numeric(X[,a]) / mX,na.rm = T)
}
return(X.norm)
}
pqn.dd <- pqn(X, QC = "LFQ.intensity.HL60.AC.H8.S2")
AC_After_normalize <- data.frame(pqn.dd)
View(AC_After_normalize)
#AC after normalization
plot(density(log2(apply(AC_After_normalize, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
shapiro.test(apply(AC_After_normalize, 1, mean, rm.na = TRUE))
View(dd)
dd <- mutate_all(dd,function(x) as.numeric(as.character(x)))
which.max(colSums(dd))
dd <- read.csv("AC_before_filteration_without_ctrl.csv")
row.names(dd) <-dd$X
dd <- dd[,-c(1)]
dd <- mutate_all(dd,function(x) as.numeric(as.character(x)))
which.max(colSums(dd))
which.max(colSums(dd , na.rm = T))
colnames(dd)
pqn <- function(X, n = "median", QC = NULL) {
X.norm <- matrix(nrow = nrow(X), ncol = ncol(X))
colnames(X.norm) <- colnames(X)
rownames(X.norm) <- rownames(X)
mX <-  median(as.numeric(X[,QC]), na.rm = T)
# do the actual normalisation
#divid each column by the median of each column by median of reference sample
for (a in 1:ncol(X)) {
X.norm[,a] <- as.numeric(X[,a]) / median(as.numeric(X[,a]) / mX,na.rm = T)
}
return(X.norm)
}
pqn.dd <- pqn(dd, QC = "LFQ.intensity.HL60.AC.H8.S2")
#AC after normalization
plot(density(log2(apply(pqn.dd, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
#Ac samples without control
dd <- data.frame(pqn.dd)
#AC after normalization
plot(density(log2(apply(dd, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
View(dd)
AC_2 <-dd[,grepl("AC.H2" , colnames(dd) , fixed = T)]
AC_6 <-dd[,grepl("AC.H6" , colnames(dd) , fixed = T)]
AC_8 <-dd[,grepl("AC.H8" , colnames(dd) , fixed = T)]
all_AC<- dd[#(apply(as.data.frame(dd$LFQ.intensity.HL60.12H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.24H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.48H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
(apply(AC_2 , 1, function(x) sum(is.na(x))) == 0 )&
(apply(AC_6 , 1, function(x) sum(is.na(x))) ==0 )&
(apply(AC_8 , 1, function(x) sum(is.na(x))) == 0 )
,]
#AC after normalization
plot(density(log2(apply(all_AC, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
shapiro.test(apply(all_AC, 1, mean, rm.na = TRUE))
#AC Before normalization
plot(density(log2(apply(AC, 1, mean, rm.na = TRUE))), main = "AC_BEFORE_Normaliztion")
shapiro.test(apply(AC, 1, mean, rm.na = TRUE))
dd <- read.csv("AC_before_filteration_without_ctrl.csv")
row.names(dd) <-dd$X
dd <- dd[,-c(1)]
#normalization
dd <- mutate_all(dd,function(x) as.numeric(as.character(x)))
which.max(colSums(dd , na.rm = T))
colnames(dd)
pqn <- function(X, n = "median", QC = NULL) {
X.norm <- matrix(nrow = nrow(X), ncol = ncol(X))
colnames(X.norm) <- colnames(X)
rownames(X.norm) <- rownames(X)
mX <-  median(as.numeric(X[,QC]), na.rm = T)
# do the actual normalisation
#divid each column by the median of each column by median of reference sample
for (a in 1:ncol(X)) {
X.norm[,a] <- as.numeric(X[,a]) / median(as.numeric(X[,a]) / mX,na.rm = T)
}
return(X.norm)
}
pqn.dd <- pqn(dd, QC = "LFQ.intensity.HL60.AC.H8.S1")
dd <- data.frame(pqn.dd)
AC_2 <-dd[,grepl("AC.H2" , colnames(dd) , fixed = T)]
AC_6 <-dd[,grepl("AC.H6" , colnames(dd) , fixed = T)]
AC_8 <-dd[,grepl("AC.H8" , colnames(dd) , fixed = T)]
all_AC<- dd[#(apply(as.data.frame(dd$LFQ.intensity.HL60.12H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.24H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.48H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
(apply(AC_2 , 1, function(x) sum(is.na(x))) == 0 )&
(apply(AC_6 , 1, function(x) sum(is.na(x))) ==0 )&
(apply(AC_8 , 1, function(x) sum(is.na(x))) == 0 )
,]
#AC after normalization
plot(density(log2(apply(all_AC, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
shapiro.test(apply(all_AC, 1, mean, rm.na = TRUE))
View(dd)
df <- dd
# Calculate the sum of each column
col_sums <- colSums(df)
# Normalize the data based on the maximum sum column
df_norm <- df / df[,"LFQ.intensity.HL60.AC.H8.S1"]
View(df_norm)
plot(density(log2(apply(df_norm, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
dd <- data.frame(df_norm)
AC_2 <-dd[,grepl("AC.H2" , colnames(dd) , fixed = T)]
AC_6 <-dd[,grepl("AC.H6" , colnames(dd) , fixed = T)]
AC_8 <-dd[,grepl("AC.H8" , colnames(dd) , fixed = T)]
all_AC<- dd[#(apply(as.data.frame(dd$LFQ.intensity.HL60.12H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.24H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
#(apply(as.data.frame(dd$LFQ.intensity.HL60.48H.Ctrl) , 1, function(x) sum(is.na(x))) != 1 )&
(apply(AC_2 , 1, function(x) sum(is.na(x))) == 0 )&
(apply(AC_6 , 1, function(x) sum(is.na(x))) ==0 )&
(apply(AC_8 , 1, function(x) sum(is.na(x))) == 0 )
,]
plot(density(log2(apply(all_AC, 1, mean, rm.na = TRUE))), main = "AC_After_Normaliztion")
shapiro.test(apply(all_AC, 1, mean, rm.na = TRUE))
plot(density(log2(apply(df_norm, 1, mean, rm.na = TRUE)) , na.rm = T), main = "AC_After_Normaliztion")
shapiro.test(apply(all_AC, 1, mean, rm.na = TRUE))
qqplot(apply(all_AC, 1, mean, rm.na = TRUE))
qqplot(apply(df_norm, 1, mean, rm.na = TRUE) , colnames(df_norm))
plot(density(log2(apply(df_norm, 1, mean, rm.na = TRUE)) , na.rm = T), main = "AC_After_Normaliztion")
